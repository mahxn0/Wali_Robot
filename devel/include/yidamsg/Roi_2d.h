// Generated by gencpp from file yidamsg/Roi_2d.msg
// DO NOT EDIT!


#ifndef YIDAMSG_MESSAGE_ROI_2D_H
#define YIDAMSG_MESSAGE_ROI_2D_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yidamsg
{
template <class ContainerAllocator>
struct Roi_2d_
{
  typedef Roi_2d_<ContainerAllocator> Type;

  Roi_2d_()
    : label(0)
    , id()
    , x()
    , y()
    , end_x()
    , end_y()
    , prob()  {
      id.assign(0);

      x.assign(0.0);

      y.assign(0.0);

      end_x.assign(0.0);

      end_y.assign(0.0);

      prob.assign(0.0);
  }
  Roi_2d_(const ContainerAllocator& _alloc)
    : label(0)
    , id()
    , x()
    , y()
    , end_x()
    , end_y()
    , prob()  {
  (void)_alloc;
      id.assign(0);

      x.assign(0.0);

      y.assign(0.0);

      end_x.assign(0.0);

      end_y.assign(0.0);

      prob.assign(0.0);
  }



   typedef int32_t _label_type;
  _label_type label;

   typedef boost::array<int32_t, 10>  _id_type;
  _id_type id;

   typedef boost::array<float, 10>  _x_type;
  _x_type x;

   typedef boost::array<float, 10>  _y_type;
  _y_type y;

   typedef boost::array<float, 10>  _end_x_type;
  _end_x_type end_x;

   typedef boost::array<float, 10>  _end_y_type;
  _end_y_type end_y;

   typedef boost::array<float, 10>  _prob_type;
  _prob_type prob;





  typedef boost::shared_ptr< ::yidamsg::Roi_2d_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yidamsg::Roi_2d_<ContainerAllocator> const> ConstPtr;

}; // struct Roi_2d_

typedef ::yidamsg::Roi_2d_<std::allocator<void> > Roi_2d;

typedef boost::shared_ptr< ::yidamsg::Roi_2d > Roi_2dPtr;
typedef boost::shared_ptr< ::yidamsg::Roi_2d const> Roi_2dConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yidamsg::Roi_2d_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yidamsg::Roi_2d_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace yidamsg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': True, 'HasHeader': False}
// {'yidamsg': ['/home/mahxn0/catkin_ws/src/yidamsg/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::yidamsg::Roi_2d_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yidamsg::Roi_2d_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yidamsg::Roi_2d_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yidamsg::Roi_2d_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yidamsg::Roi_2d_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yidamsg::Roi_2d_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yidamsg::Roi_2d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7a085707da4760a19e76a88dea363e6c";
  }

  static const char* value(const ::yidamsg::Roi_2d_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7a085707da4760a1ULL;
  static const uint64_t static_value2 = 0x9e76a88dea363e6cULL;
};

template<class ContainerAllocator>
struct DataType< ::yidamsg::Roi_2d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yidamsg/Roi_2d";
  }

  static const char* value(const ::yidamsg::Roi_2d_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yidamsg::Roi_2d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 label\n\
int32[10] id\n\
float32[10] x\n\
float32[10] y\n\
float32[10] end_x\n\
float32[10] end_y\n\
float32[10] prob\n\
";
  }

  static const char* value(const ::yidamsg::Roi_2d_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yidamsg::Roi_2d_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.label);
      stream.next(m.id);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.end_x);
      stream.next(m.end_y);
      stream.next(m.prob);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Roi_2d_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yidamsg::Roi_2d_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yidamsg::Roi_2d_<ContainerAllocator>& v)
  {
    s << indent << "label: ";
    Printer<int32_t>::stream(s, indent + "  ", v.label);
    s << indent << "id[]" << std::endl;
    for (size_t i = 0; i < v.id.size(); ++i)
    {
      s << indent << "  id[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.id[i]);
    }
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.y[i]);
    }
    s << indent << "end_x[]" << std::endl;
    for (size_t i = 0; i < v.end_x.size(); ++i)
    {
      s << indent << "  end_x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.end_x[i]);
    }
    s << indent << "end_y[]" << std::endl;
    for (size_t i = 0; i < v.end_y.size(); ++i)
    {
      s << indent << "  end_y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.end_y[i]);
    }
    s << indent << "prob[]" << std::endl;
    for (size_t i = 0; i < v.prob.size(); ++i)
    {
      s << indent << "  prob[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.prob[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // YIDAMSG_MESSAGE_ROI_2D_H
