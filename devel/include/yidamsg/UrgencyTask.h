// Generated by gencpp from file yidamsg/UrgencyTask.msg
// DO NOT EDIT!


#ifndef YIDAMSG_MESSAGE_URGENCYTASK_H
#define YIDAMSG_MESSAGE_URGENCYTASK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yidamsg
{
template <class ContainerAllocator>
struct UrgencyTask_
{
  typedef UrgencyTask_<ContainerAllocator> Type;

  UrgencyTask_()
    : task_id(0)
    , robot_id(0)
    , task_type(0)
    , task_level(0)  {
    }
  UrgencyTask_(const ContainerAllocator& _alloc)
    : task_id(0)
    , robot_id(0)
    , task_type(0)
    , task_level(0)  {
  (void)_alloc;
    }



   typedef int32_t _task_id_type;
  _task_id_type task_id;

   typedef int32_t _robot_id_type;
  _robot_id_type robot_id;

   typedef int32_t _task_type_type;
  _task_type_type task_type;

   typedef int32_t _task_level_type;
  _task_level_type task_level;





  typedef boost::shared_ptr< ::yidamsg::UrgencyTask_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yidamsg::UrgencyTask_<ContainerAllocator> const> ConstPtr;

}; // struct UrgencyTask_

typedef ::yidamsg::UrgencyTask_<std::allocator<void> > UrgencyTask;

typedef boost::shared_ptr< ::yidamsg::UrgencyTask > UrgencyTaskPtr;
typedef boost::shared_ptr< ::yidamsg::UrgencyTask const> UrgencyTaskConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yidamsg::UrgencyTask_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yidamsg::UrgencyTask_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace yidamsg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': True, 'HasHeader': False}
// {'yidamsg': ['/home/mahxn0/catkin_ws/src/yidamsg/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::yidamsg::UrgencyTask_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yidamsg::UrgencyTask_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yidamsg::UrgencyTask_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yidamsg::UrgencyTask_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yidamsg::UrgencyTask_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yidamsg::UrgencyTask_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yidamsg::UrgencyTask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ec737a80ae182d535d86035a7ece0817";
  }

  static const char* value(const ::yidamsg::UrgencyTask_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xec737a80ae182d53ULL;
  static const uint64_t static_value2 = 0x5d86035a7ece0817ULL;
};

template<class ContainerAllocator>
struct DataType< ::yidamsg::UrgencyTask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yidamsg/UrgencyTask";
  }

  static const char* value(const ::yidamsg::UrgencyTask_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yidamsg::UrgencyTask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 task_id\n\
int32 robot_id\n\
int32 task_type\n\
int32 task_level\n\
";
  }

  static const char* value(const ::yidamsg::UrgencyTask_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yidamsg::UrgencyTask_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task_id);
      stream.next(m.robot_id);
      stream.next(m.task_type);
      stream.next(m.task_level);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UrgencyTask_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yidamsg::UrgencyTask_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yidamsg::UrgencyTask_<ContainerAllocator>& v)
  {
    s << indent << "task_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.task_id);
    s << indent << "robot_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.robot_id);
    s << indent << "task_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.task_type);
    s << indent << "task_level: ";
    Printer<int32_t>::stream(s, indent + "  ", v.task_level);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YIDAMSG_MESSAGE_URGENCYTASK_H
