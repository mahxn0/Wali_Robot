// Generated by gencpp from file yidamsg/walle_wakeup.msg
// DO NOT EDIT!


#ifndef YIDAMSG_MESSAGE_WALLE_WAKEUP_H
#define YIDAMSG_MESSAGE_WALLE_WAKEUP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yidamsg
{
template <class ContainerAllocator>
struct walle_wakeup_
{
  typedef walle_wakeup_<ContainerAllocator> Type;

  walle_wakeup_()
    : wakeup(0)
    , score(0)
    , key_word()  {
    }
  walle_wakeup_(const ContainerAllocator& _alloc)
    : wakeup(0)
    , score(0)
    , key_word(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _wakeup_type;
  _wakeup_type wakeup;

   typedef int32_t _score_type;
  _score_type score;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _key_word_type;
  _key_word_type key_word;





  typedef boost::shared_ptr< ::yidamsg::walle_wakeup_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yidamsg::walle_wakeup_<ContainerAllocator> const> ConstPtr;

}; // struct walle_wakeup_

typedef ::yidamsg::walle_wakeup_<std::allocator<void> > walle_wakeup;

typedef boost::shared_ptr< ::yidamsg::walle_wakeup > walle_wakeupPtr;
typedef boost::shared_ptr< ::yidamsg::walle_wakeup const> walle_wakeupConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yidamsg::walle_wakeup_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yidamsg::walle_wakeup_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace yidamsg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': False, 'HasHeader': False}
// {'yidamsg': ['/home/mahxn0/catkin_ws/src/yidamsg/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::yidamsg::walle_wakeup_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yidamsg::walle_wakeup_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yidamsg::walle_wakeup_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yidamsg::walle_wakeup_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yidamsg::walle_wakeup_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yidamsg::walle_wakeup_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yidamsg::walle_wakeup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0b832037d6e61fd58c7aa70efb2709b7";
  }

  static const char* value(const ::yidamsg::walle_wakeup_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0b832037d6e61fd5ULL;
  static const uint64_t static_value2 = 0x8c7aa70efb2709b7ULL;
};

template<class ContainerAllocator>
struct DataType< ::yidamsg::walle_wakeup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yidamsg/walle_wakeup";
  }

  static const char* value(const ::yidamsg::walle_wakeup_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yidamsg::walle_wakeup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 wakeup\n\
int32 score\n\
string key_word\n\
";
  }

  static const char* value(const ::yidamsg::walle_wakeup_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yidamsg::walle_wakeup_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.wakeup);
      stream.next(m.score);
      stream.next(m.key_word);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct walle_wakeup_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yidamsg::walle_wakeup_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yidamsg::walle_wakeup_<ContainerAllocator>& v)
  {
    s << indent << "wakeup: ";
    Printer<int32_t>::stream(s, indent + "  ", v.wakeup);
    s << indent << "score: ";
    Printer<int32_t>::stream(s, indent + "  ", v.score);
    s << indent << "key_word: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.key_word);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YIDAMSG_MESSAGE_WALLE_WAKEUP_H
