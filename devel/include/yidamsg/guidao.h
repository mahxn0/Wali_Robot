// Generated by gencpp from file yidamsg/guidao.msg
// DO NOT EDIT!


#ifndef YIDAMSG_MESSAGE_GUIDAO_H
#define YIDAMSG_MESSAGE_GUIDAO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yidamsg
{
template <class ContainerAllocator>
struct guidao_
{
  typedef guidao_<ContainerAllocator> Type;

  guidao_()
    : rec_method()
    , rec_name()
    , dec_hat(0)
    , dec_glove(0)
    , dec_shoe(0)
    , rail(0)
    , safety_belt(0)
    , alam()
    , action()  {
    }
  guidao_(const ContainerAllocator& _alloc)
    : rec_method(_alloc)
    , rec_name(_alloc)
    , dec_hat(0)
    , dec_glove(0)
    , dec_shoe(0)
    , rail(0)
    , safety_belt(0)
    , alam(_alloc)
    , action(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _rec_method_type;
  _rec_method_type rec_method;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _rec_name_type;
  _rec_name_type rec_name;

   typedef int32_t _dec_hat_type;
  _dec_hat_type dec_hat;

   typedef int32_t _dec_glove_type;
  _dec_glove_type dec_glove;

   typedef int32_t _dec_shoe_type;
  _dec_shoe_type dec_shoe;

   typedef int32_t _rail_type;
  _rail_type rail;

   typedef int32_t _safety_belt_type;
  _safety_belt_type safety_belt;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _alam_type;
  _alam_type alam;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_type;
  _action_type action;





  typedef boost::shared_ptr< ::yidamsg::guidao_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yidamsg::guidao_<ContainerAllocator> const> ConstPtr;

}; // struct guidao_

typedef ::yidamsg::guidao_<std::allocator<void> > guidao;

typedef boost::shared_ptr< ::yidamsg::guidao > guidaoPtr;
typedef boost::shared_ptr< ::yidamsg::guidao const> guidaoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yidamsg::guidao_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yidamsg::guidao_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace yidamsg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': False, 'HasHeader': False}
// {'yidamsg': ['/home/mahxn0/catkin_ws/src/yidamsg/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::yidamsg::guidao_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yidamsg::guidao_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yidamsg::guidao_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yidamsg::guidao_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yidamsg::guidao_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yidamsg::guidao_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yidamsg::guidao_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5f7b72245dfc6166afb75ac5cae3a673";
  }

  static const char* value(const ::yidamsg::guidao_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5f7b72245dfc6166ULL;
  static const uint64_t static_value2 = 0xafb75ac5cae3a673ULL;
};

template<class ContainerAllocator>
struct DataType< ::yidamsg::guidao_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yidamsg/guidao";
  }

  static const char* value(const ::yidamsg::guidao_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yidamsg::guidao_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string rec_method\n\
string rec_name\n\
int32 dec_hat\n\
int32 dec_glove\n\
int32 dec_shoe\n\
int32 rail\n\
int32 safety_belt\n\
string alam\n\
string action\n\
";
  }

  static const char* value(const ::yidamsg::guidao_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yidamsg::guidao_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rec_method);
      stream.next(m.rec_name);
      stream.next(m.dec_hat);
      stream.next(m.dec_glove);
      stream.next(m.dec_shoe);
      stream.next(m.rail);
      stream.next(m.safety_belt);
      stream.next(m.alam);
      stream.next(m.action);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct guidao_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yidamsg::guidao_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yidamsg::guidao_<ContainerAllocator>& v)
  {
    s << indent << "rec_method: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.rec_method);
    s << indent << "rec_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.rec_name);
    s << indent << "dec_hat: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dec_hat);
    s << indent << "dec_glove: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dec_glove);
    s << indent << "dec_shoe: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dec_shoe);
    s << indent << "rail: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rail);
    s << indent << "safety_belt: ";
    Printer<int32_t>::stream(s, indent + "  ", v.safety_belt);
    s << indent << "alam: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.alam);
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YIDAMSG_MESSAGE_GUIDAO_H
