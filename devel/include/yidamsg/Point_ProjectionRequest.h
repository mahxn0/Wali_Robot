// Generated by gencpp from file yidamsg/Point_ProjectionRequest.msg
// DO NOT EDIT!


#ifndef YIDAMSG_MESSAGE_POINT_PROJECTIONREQUEST_H
#define YIDAMSG_MESSAGE_POINT_PROJECTIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yidamsg
{
template <class ContainerAllocator>
struct Point_ProjectionRequest_
{
  typedef Point_ProjectionRequest_<ContainerAllocator> Type;

  Point_ProjectionRequest_()
    : x1(0.0)
    , y1(0.0)
    , z1(0.0)
    , x2(0.0)
    , y2(0.0)
    , z2(0.0)
    , x3(0.0)
    , y3(0.0)
    , z3(0.0)
    , x4(0.0)
    , y4(0.0)
    , z4(0.0)
    , flag(0)  {
    }
  Point_ProjectionRequest_(const ContainerAllocator& _alloc)
    : x1(0.0)
    , y1(0.0)
    , z1(0.0)
    , x2(0.0)
    , y2(0.0)
    , z2(0.0)
    , x3(0.0)
    , y3(0.0)
    , z3(0.0)
    , x4(0.0)
    , y4(0.0)
    , z4(0.0)
    , flag(0)  {
  (void)_alloc;
    }



   typedef float _x1_type;
  _x1_type x1;

   typedef float _y1_type;
  _y1_type y1;

   typedef float _z1_type;
  _z1_type z1;

   typedef float _x2_type;
  _x2_type x2;

   typedef float _y2_type;
  _y2_type y2;

   typedef float _z2_type;
  _z2_type z2;

   typedef float _x3_type;
  _x3_type x3;

   typedef float _y3_type;
  _y3_type y3;

   typedef float _z3_type;
  _z3_type z3;

   typedef float _x4_type;
  _x4_type x4;

   typedef float _y4_type;
  _y4_type y4;

   typedef float _z4_type;
  _z4_type z4;

   typedef int32_t _flag_type;
  _flag_type flag;





  typedef boost::shared_ptr< ::yidamsg::Point_ProjectionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yidamsg::Point_ProjectionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct Point_ProjectionRequest_

typedef ::yidamsg::Point_ProjectionRequest_<std::allocator<void> > Point_ProjectionRequest;

typedef boost::shared_ptr< ::yidamsg::Point_ProjectionRequest > Point_ProjectionRequestPtr;
typedef boost::shared_ptr< ::yidamsg::Point_ProjectionRequest const> Point_ProjectionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yidamsg::Point_ProjectionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yidamsg::Point_ProjectionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace yidamsg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': True, 'HasHeader': False}
// {'yidamsg': ['/home/mahxn0/catkin_ws/src/yidamsg/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::yidamsg::Point_ProjectionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yidamsg::Point_ProjectionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yidamsg::Point_ProjectionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yidamsg::Point_ProjectionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yidamsg::Point_ProjectionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yidamsg::Point_ProjectionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yidamsg::Point_ProjectionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b9fcf3e39769a39568d087fcc46a1bb9";
  }

  static const char* value(const ::yidamsg::Point_ProjectionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb9fcf3e39769a395ULL;
  static const uint64_t static_value2 = 0x68d087fcc46a1bb9ULL;
};

template<class ContainerAllocator>
struct DataType< ::yidamsg::Point_ProjectionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yidamsg/Point_ProjectionRequest";
  }

  static const char* value(const ::yidamsg::Point_ProjectionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yidamsg::Point_ProjectionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x1\n\
float32 y1\n\
float32 z1\n\
float32 x2\n\
float32 y2\n\
float32 z2\n\
float32 x3\n\
float32 y3\n\
float32 z3\n\
float32 x4\n\
float32 y4\n\
float32 z4\n\
int32 flag\n\
";
  }

  static const char* value(const ::yidamsg::Point_ProjectionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yidamsg::Point_ProjectionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x1);
      stream.next(m.y1);
      stream.next(m.z1);
      stream.next(m.x2);
      stream.next(m.y2);
      stream.next(m.z2);
      stream.next(m.x3);
      stream.next(m.y3);
      stream.next(m.z3);
      stream.next(m.x4);
      stream.next(m.y4);
      stream.next(m.z4);
      stream.next(m.flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Point_ProjectionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yidamsg::Point_ProjectionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yidamsg::Point_ProjectionRequest_<ContainerAllocator>& v)
  {
    s << indent << "x1: ";
    Printer<float>::stream(s, indent + "  ", v.x1);
    s << indent << "y1: ";
    Printer<float>::stream(s, indent + "  ", v.y1);
    s << indent << "z1: ";
    Printer<float>::stream(s, indent + "  ", v.z1);
    s << indent << "x2: ";
    Printer<float>::stream(s, indent + "  ", v.x2);
    s << indent << "y2: ";
    Printer<float>::stream(s, indent + "  ", v.y2);
    s << indent << "z2: ";
    Printer<float>::stream(s, indent + "  ", v.z2);
    s << indent << "x3: ";
    Printer<float>::stream(s, indent + "  ", v.x3);
    s << indent << "y3: ";
    Printer<float>::stream(s, indent + "  ", v.y3);
    s << indent << "z3: ";
    Printer<float>::stream(s, indent + "  ", v.z3);
    s << indent << "x4: ";
    Printer<float>::stream(s, indent + "  ", v.x4);
    s << indent << "y4: ";
    Printer<float>::stream(s, indent + "  ", v.y4);
    s << indent << "z4: ";
    Printer<float>::stream(s, indent + "  ", v.z4);
    s << indent << "flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YIDAMSG_MESSAGE_POINT_PROJECTIONREQUEST_H
