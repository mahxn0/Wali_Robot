// Generated by gencpp from file yidamsg/Image_data.msg
// DO NOT EDIT!


#ifndef YIDAMSG_MESSAGE_IMAGE_DATA_H
#define YIDAMSG_MESSAGE_IMAGE_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yidamsg
{
template <class ContainerAllocator>
struct Image_data_
{
  typedef Image_data_<ContainerAllocator> Type;

  Image_data_()
    : pImgBuf()
    , width(0)
    , height(0)
    , id(0)
    , length(0)  {
    }
  Image_data_(const ContainerAllocator& _alloc)
    : pImgBuf(_alloc)
    , width(0)
    , height(0)
    , id(0)
    , length(0)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _pImgBuf_type;
  _pImgBuf_type pImgBuf;

   typedef int32_t _width_type;
  _width_type width;

   typedef int32_t _height_type;
  _height_type height;

   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _length_type;
  _length_type length;





  typedef boost::shared_ptr< ::yidamsg::Image_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yidamsg::Image_data_<ContainerAllocator> const> ConstPtr;

}; // struct Image_data_

typedef ::yidamsg::Image_data_<std::allocator<void> > Image_data;

typedef boost::shared_ptr< ::yidamsg::Image_data > Image_dataPtr;
typedef boost::shared_ptr< ::yidamsg::Image_data const> Image_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yidamsg::Image_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yidamsg::Image_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace yidamsg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': False, 'HasHeader': False}
// {'yidamsg': ['/home/mahxn0/catkin_ws/src/yidamsg/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::yidamsg::Image_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yidamsg::Image_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yidamsg::Image_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yidamsg::Image_data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yidamsg::Image_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yidamsg::Image_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yidamsg::Image_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b5d32e3c02cd9daca5315752757ea66f";
  }

  static const char* value(const ::yidamsg::Image_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb5d32e3c02cd9dacULL;
  static const uint64_t static_value2 = 0xa5315752757ea66fULL;
};

template<class ContainerAllocator>
struct DataType< ::yidamsg::Image_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yidamsg/Image_data";
  }

  static const char* value(const ::yidamsg::Image_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yidamsg::Image_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[] pImgBuf\n\
int32 width\n\
int32 height\n\
int32 id\n\
int32 length\n\
\n\
";
  }

  static const char* value(const ::yidamsg::Image_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yidamsg::Image_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pImgBuf);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.id);
      stream.next(m.length);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Image_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yidamsg::Image_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yidamsg::Image_data_<ContainerAllocator>& v)
  {
    s << indent << "pImgBuf[]" << std::endl;
    for (size_t i = 0; i < v.pImgBuf.size(); ++i)
    {
      s << indent << "  pImgBuf[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.pImgBuf[i]);
    }
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "length: ";
    Printer<int32_t>::stream(s, indent + "  ", v.length);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YIDAMSG_MESSAGE_IMAGE_DATA_H
