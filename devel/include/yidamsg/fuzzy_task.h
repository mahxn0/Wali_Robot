// Generated by gencpp from file yidamsg/fuzzy_task.msg
// DO NOT EDIT!


#ifndef YIDAMSG_MESSAGE_FUZZY_TASK_H
#define YIDAMSG_MESSAGE_FUZZY_TASK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yidamsg
{
template <class ContainerAllocator>
struct fuzzy_task_
{
  typedef fuzzy_task_<ContainerAllocator> Type;

  fuzzy_task_()
    : control_flag(0)
    , dis_left(0.0)
    , dis_right(0.0)
    , included_angle(0.0)
    , turn_angle(0.0)
    , dis_cur_pos(0.0)
    , cur_speed(0.0)
    , obstacle_pos(0.0)
    , allow_width(0.0)
    , next_width(0.0)
    , msg_type()
    , align(0)  {
    }
  fuzzy_task_(const ContainerAllocator& _alloc)
    : control_flag(0)
    , dis_left(0.0)
    , dis_right(0.0)
    , included_angle(0.0)
    , turn_angle(0.0)
    , dis_cur_pos(0.0)
    , cur_speed(0.0)
    , obstacle_pos(0.0)
    , allow_width(0.0)
    , next_width(0.0)
    , msg_type(_alloc)
    , align(0)  {
  (void)_alloc;
    }



   typedef int32_t _control_flag_type;
  _control_flag_type control_flag;

   typedef float _dis_left_type;
  _dis_left_type dis_left;

   typedef float _dis_right_type;
  _dis_right_type dis_right;

   typedef float _included_angle_type;
  _included_angle_type included_angle;

   typedef float _turn_angle_type;
  _turn_angle_type turn_angle;

   typedef float _dis_cur_pos_type;
  _dis_cur_pos_type dis_cur_pos;

   typedef float _cur_speed_type;
  _cur_speed_type cur_speed;

   typedef float _obstacle_pos_type;
  _obstacle_pos_type obstacle_pos;

   typedef float _allow_width_type;
  _allow_width_type allow_width;

   typedef float _next_width_type;
  _next_width_type next_width;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msg_type_type;
  _msg_type_type msg_type;

   typedef int32_t _align_type;
  _align_type align;





  typedef boost::shared_ptr< ::yidamsg::fuzzy_task_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yidamsg::fuzzy_task_<ContainerAllocator> const> ConstPtr;

}; // struct fuzzy_task_

typedef ::yidamsg::fuzzy_task_<std::allocator<void> > fuzzy_task;

typedef boost::shared_ptr< ::yidamsg::fuzzy_task > fuzzy_taskPtr;
typedef boost::shared_ptr< ::yidamsg::fuzzy_task const> fuzzy_taskConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yidamsg::fuzzy_task_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yidamsg::fuzzy_task_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace yidamsg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': False, 'HasHeader': False}
// {'yidamsg': ['/home/mahxn0/catkin_ws/src/yidamsg/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::yidamsg::fuzzy_task_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yidamsg::fuzzy_task_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yidamsg::fuzzy_task_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yidamsg::fuzzy_task_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yidamsg::fuzzy_task_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yidamsg::fuzzy_task_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yidamsg::fuzzy_task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "438c1dac4f2a4a69b46ae226145532f4";
  }

  static const char* value(const ::yidamsg::fuzzy_task_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x438c1dac4f2a4a69ULL;
  static const uint64_t static_value2 = 0xb46ae226145532f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::yidamsg::fuzzy_task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yidamsg/fuzzy_task";
  }

  static const char* value(const ::yidamsg::fuzzy_task_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yidamsg::fuzzy_task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 control_flag\n\
float32 dis_left\n\
float32 dis_right\n\
float32 included_angle\n\
float32 turn_angle\n\
float32 dis_cur_pos\n\
float32 cur_speed\n\
float32 obstacle_pos\n\
float32 allow_width\n\
float32 next_width\n\
string msg_type\n\
int32 align\n\
";
  }

  static const char* value(const ::yidamsg::fuzzy_task_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yidamsg::fuzzy_task_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.control_flag);
      stream.next(m.dis_left);
      stream.next(m.dis_right);
      stream.next(m.included_angle);
      stream.next(m.turn_angle);
      stream.next(m.dis_cur_pos);
      stream.next(m.cur_speed);
      stream.next(m.obstacle_pos);
      stream.next(m.allow_width);
      stream.next(m.next_width);
      stream.next(m.msg_type);
      stream.next(m.align);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct fuzzy_task_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yidamsg::fuzzy_task_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yidamsg::fuzzy_task_<ContainerAllocator>& v)
  {
    s << indent << "control_flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.control_flag);
    s << indent << "dis_left: ";
    Printer<float>::stream(s, indent + "  ", v.dis_left);
    s << indent << "dis_right: ";
    Printer<float>::stream(s, indent + "  ", v.dis_right);
    s << indent << "included_angle: ";
    Printer<float>::stream(s, indent + "  ", v.included_angle);
    s << indent << "turn_angle: ";
    Printer<float>::stream(s, indent + "  ", v.turn_angle);
    s << indent << "dis_cur_pos: ";
    Printer<float>::stream(s, indent + "  ", v.dis_cur_pos);
    s << indent << "cur_speed: ";
    Printer<float>::stream(s, indent + "  ", v.cur_speed);
    s << indent << "obstacle_pos: ";
    Printer<float>::stream(s, indent + "  ", v.obstacle_pos);
    s << indent << "allow_width: ";
    Printer<float>::stream(s, indent + "  ", v.allow_width);
    s << indent << "next_width: ";
    Printer<float>::stream(s, indent + "  ", v.next_width);
    s << indent << "msg_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.msg_type);
    s << indent << "align: ";
    Printer<int32_t>::stream(s, indent + "  ", v.align);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YIDAMSG_MESSAGE_FUZZY_TASK_H
