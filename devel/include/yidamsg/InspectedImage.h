// Generated by gencpp from file yidamsg/InspectedImage.msg
// DO NOT EDIT!


#ifndef YIDAMSG_MESSAGE_INSPECTEDIMAGE_H
#define YIDAMSG_MESSAGE_INSPECTEDIMAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yidamsg
{
template <class ContainerAllocator>
struct InspectedImage_
{
  typedef InspectedImage_<ContainerAllocator> Type;

  InspectedImage_()
    : camid(0)
    , picid(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , image()
    , len(0)
    , equipid()
    , result()
    , success(false)  {
      image.assign(0);
  }
  InspectedImage_(const ContainerAllocator& _alloc)
    : camid(0)
    , picid(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , image()
    , len(0)
    , equipid(_alloc)
    , result(_alloc)
    , success(false)  {
  (void)_alloc;
      image.assign(0);
  }



   typedef int32_t _camid_type;
  _camid_type camid;

   typedef int32_t _picid_type;
  _picid_type picid;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef boost::array<uint8_t, 1000000>  _image_type;
  _image_type image;

   typedef int32_t _len_type;
  _len_type len;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _equipid_type;
  _equipid_type equipid;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _result_type;
  _result_type result;

   typedef uint8_t _success_type;
  _success_type success;





  typedef boost::shared_ptr< ::yidamsg::InspectedImage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yidamsg::InspectedImage_<ContainerAllocator> const> ConstPtr;

}; // struct InspectedImage_

typedef ::yidamsg::InspectedImage_<std::allocator<void> > InspectedImage;

typedef boost::shared_ptr< ::yidamsg::InspectedImage > InspectedImagePtr;
typedef boost::shared_ptr< ::yidamsg::InspectedImage const> InspectedImageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yidamsg::InspectedImage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yidamsg::InspectedImage_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace yidamsg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': False, 'HasHeader': False}
// {'yidamsg': ['/home/mahxn0/catkin_ws/src/yidamsg/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::yidamsg::InspectedImage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yidamsg::InspectedImage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yidamsg::InspectedImage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yidamsg::InspectedImage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yidamsg::InspectedImage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yidamsg::InspectedImage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yidamsg::InspectedImage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bb4c17936c63938f09f6110bd54718dd";
  }

  static const char* value(const ::yidamsg::InspectedImage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbb4c17936c63938fULL;
  static const uint64_t static_value2 = 0x09f6110bd54718ddULL;
};

template<class ContainerAllocator>
struct DataType< ::yidamsg::InspectedImage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yidamsg/InspectedImage";
  }

  static const char* value(const ::yidamsg::InspectedImage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yidamsg::InspectedImage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 camid\n\
int32 picid\n\
float32 x\n\
float32 y\n\
float32 z\n\
uint8[1000000] image\n\
int32 len\n\
string equipid\n\
string result\n\
bool success\n\
";
  }

  static const char* value(const ::yidamsg::InspectedImage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yidamsg::InspectedImage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.camid);
      stream.next(m.picid);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.image);
      stream.next(m.len);
      stream.next(m.equipid);
      stream.next(m.result);
      stream.next(m.success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct InspectedImage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yidamsg::InspectedImage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yidamsg::InspectedImage_<ContainerAllocator>& v)
  {
    s << indent << "camid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.camid);
    s << indent << "picid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.picid);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "image[]" << std::endl;
    for (size_t i = 0; i < v.image.size(); ++i)
    {
      s << indent << "  image[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.image[i]);
    }
    s << indent << "len: ";
    Printer<int32_t>::stream(s, indent + "  ", v.len);
    s << indent << "equipid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.equipid);
    s << indent << "result: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.result);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YIDAMSG_MESSAGE_INSPECTEDIMAGE_H
