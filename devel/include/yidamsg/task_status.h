// Generated by gencpp from file yidamsg/task_status.msg
// DO NOT EDIT!


#ifndef YIDAMSG_MESSAGE_TASK_STATUS_H
#define YIDAMSG_MESSAGE_TASK_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yidamsg
{
template <class ContainerAllocator>
struct task_status_
{
  typedef task_status_<ContainerAllocator> Type;

  task_status_()
    : taskid(0)
    , start_x(0.0)
    , start_y(0.0)
    , start_z(0.0)
    , end_x(0.0)
    , end_y(0.0)
    , end_z(0.0)
    , alldis(0.0)
    , dis(0.0)
    , speed(0.0)
    , dis_left(0.0)
    , dis_right(0.0)
    , next_width(0.0)
    , road_width(0.0)
    , control_flag(0)
    , log()
    , direction(0)
    , align(0)  {
    }
  task_status_(const ContainerAllocator& _alloc)
    : taskid(0)
    , start_x(0.0)
    , start_y(0.0)
    , start_z(0.0)
    , end_x(0.0)
    , end_y(0.0)
    , end_z(0.0)
    , alldis(0.0)
    , dis(0.0)
    , speed(0.0)
    , dis_left(0.0)
    , dis_right(0.0)
    , next_width(0.0)
    , road_width(0.0)
    , control_flag(0)
    , log(_alloc)
    , direction(0)
    , align(0)  {
  (void)_alloc;
    }



   typedef int32_t _taskid_type;
  _taskid_type taskid;

   typedef float _start_x_type;
  _start_x_type start_x;

   typedef float _start_y_type;
  _start_y_type start_y;

   typedef float _start_z_type;
  _start_z_type start_z;

   typedef float _end_x_type;
  _end_x_type end_x;

   typedef float _end_y_type;
  _end_y_type end_y;

   typedef float _end_z_type;
  _end_z_type end_z;

   typedef float _alldis_type;
  _alldis_type alldis;

   typedef float _dis_type;
  _dis_type dis;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _dis_left_type;
  _dis_left_type dis_left;

   typedef float _dis_right_type;
  _dis_right_type dis_right;

   typedef float _next_width_type;
  _next_width_type next_width;

   typedef float _road_width_type;
  _road_width_type road_width;

   typedef int32_t _control_flag_type;
  _control_flag_type control_flag;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _log_type;
  _log_type log;

   typedef int32_t _direction_type;
  _direction_type direction;

   typedef int32_t _align_type;
  _align_type align;





  typedef boost::shared_ptr< ::yidamsg::task_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yidamsg::task_status_<ContainerAllocator> const> ConstPtr;

}; // struct task_status_

typedef ::yidamsg::task_status_<std::allocator<void> > task_status;

typedef boost::shared_ptr< ::yidamsg::task_status > task_statusPtr;
typedef boost::shared_ptr< ::yidamsg::task_status const> task_statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yidamsg::task_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yidamsg::task_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace yidamsg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': False, 'HasHeader': False}
// {'yidamsg': ['/home/mahxn0/catkin_ws/src/yidamsg/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::yidamsg::task_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yidamsg::task_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yidamsg::task_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yidamsg::task_status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yidamsg::task_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yidamsg::task_status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yidamsg::task_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "819ed6ebecf2f7d3f8dc2a0e3cded22d";
  }

  static const char* value(const ::yidamsg::task_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x819ed6ebecf2f7d3ULL;
  static const uint64_t static_value2 = 0xf8dc2a0e3cded22dULL;
};

template<class ContainerAllocator>
struct DataType< ::yidamsg::task_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yidamsg/task_status";
  }

  static const char* value(const ::yidamsg::task_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yidamsg::task_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 taskid\n\
float32 start_x\n\
float32 start_y\n\
float32 start_z\n\
float32 end_x\n\
float32 end_y\n\
float32 end_z\n\
float32 alldis\n\
float32 dis\n\
float32 speed\n\
float32 dis_left\n\
float32 dis_right\n\
float32 next_width\n\
float32 road_width\n\
int32 control_flag\n\
string log\n\
int32 direction\n\
int32 align\n\
";
  }

  static const char* value(const ::yidamsg::task_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yidamsg::task_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.taskid);
      stream.next(m.start_x);
      stream.next(m.start_y);
      stream.next(m.start_z);
      stream.next(m.end_x);
      stream.next(m.end_y);
      stream.next(m.end_z);
      stream.next(m.alldis);
      stream.next(m.dis);
      stream.next(m.speed);
      stream.next(m.dis_left);
      stream.next(m.dis_right);
      stream.next(m.next_width);
      stream.next(m.road_width);
      stream.next(m.control_flag);
      stream.next(m.log);
      stream.next(m.direction);
      stream.next(m.align);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct task_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yidamsg::task_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yidamsg::task_status_<ContainerAllocator>& v)
  {
    s << indent << "taskid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.taskid);
    s << indent << "start_x: ";
    Printer<float>::stream(s, indent + "  ", v.start_x);
    s << indent << "start_y: ";
    Printer<float>::stream(s, indent + "  ", v.start_y);
    s << indent << "start_z: ";
    Printer<float>::stream(s, indent + "  ", v.start_z);
    s << indent << "end_x: ";
    Printer<float>::stream(s, indent + "  ", v.end_x);
    s << indent << "end_y: ";
    Printer<float>::stream(s, indent + "  ", v.end_y);
    s << indent << "end_z: ";
    Printer<float>::stream(s, indent + "  ", v.end_z);
    s << indent << "alldis: ";
    Printer<float>::stream(s, indent + "  ", v.alldis);
    s << indent << "dis: ";
    Printer<float>::stream(s, indent + "  ", v.dis);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "dis_left: ";
    Printer<float>::stream(s, indent + "  ", v.dis_left);
    s << indent << "dis_right: ";
    Printer<float>::stream(s, indent + "  ", v.dis_right);
    s << indent << "next_width: ";
    Printer<float>::stream(s, indent + "  ", v.next_width);
    s << indent << "road_width: ";
    Printer<float>::stream(s, indent + "  ", v.road_width);
    s << indent << "control_flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.control_flag);
    s << indent << "log: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.log);
    s << indent << "direction: ";
    Printer<int32_t>::stream(s, indent + "  ", v.direction);
    s << indent << "align: ";
    Printer<int32_t>::stream(s, indent + "  ", v.align);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YIDAMSG_MESSAGE_TASK_STATUS_H
