# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from yidamsg/Roi_2d.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Roi_2d(genpy.Message):
  _md5sum = "7a085707da4760a19e76a88dea363e6c"
  _type = "yidamsg/Roi_2d"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 label
int32[10] id
float32[10] x
float32[10] y
float32[10] end_x
float32[10] end_y
float32[10] prob
"""
  __slots__ = ['label','id','x','y','end_x','end_y','prob']
  _slot_types = ['int32','int32[10]','float32[10]','float32[10]','float32[10]','float32[10]','float32[10]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       label,id,x,y,end_x,end_y,prob

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Roi_2d, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.label is None:
        self.label = 0
      if self.id is None:
        self.id = [0] * 10
      if self.x is None:
        self.x = [0.] * 10
      if self.y is None:
        self.y = [0.] * 10
      if self.end_x is None:
        self.end_x = [0.] * 10
      if self.end_y is None:
        self.end_y = [0.] * 10
      if self.prob is None:
        self.prob = [0.] * 10
    else:
      self.label = 0
      self.id = [0] * 10
      self.x = [0.] * 10
      self.y = [0.] * 10
      self.end_x = [0.] * 10
      self.end_y = [0.] * 10
      self.prob = [0.] * 10

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_i().pack(self.label))
      buff.write(_get_struct_10i().pack(*self.id))
      buff.write(_get_struct_10f().pack(*self.x))
      buff.write(_get_struct_10f().pack(*self.y))
      buff.write(_get_struct_10f().pack(*self.end_x))
      buff.write(_get_struct_10f().pack(*self.end_y))
      buff.write(_get_struct_10f().pack(*self.prob))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.label,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 40
      self.id = _get_struct_10i().unpack(str[start:end])
      start = end
      end += 40
      self.x = _get_struct_10f().unpack(str[start:end])
      start = end
      end += 40
      self.y = _get_struct_10f().unpack(str[start:end])
      start = end
      end += 40
      self.end_x = _get_struct_10f().unpack(str[start:end])
      start = end
      end += 40
      self.end_y = _get_struct_10f().unpack(str[start:end])
      start = end
      end += 40
      self.prob = _get_struct_10f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_i().pack(self.label))
      buff.write(self.id.tostring())
      buff.write(self.x.tostring())
      buff.write(self.y.tostring())
      buff.write(self.end_x.tostring())
      buff.write(self.end_y.tostring())
      buff.write(self.prob.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.label,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 40
      self.id = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=10)
      start = end
      end += 40
      self.x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=10)
      start = end
      end += 40
      self.y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=10)
      start = end
      end += 40
      self.end_x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=10)
      start = end
      end += 40
      self.end_y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=10)
      start = end
      end += 40
      self.prob = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=10)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_10i = None
def _get_struct_10i():
    global _struct_10i
    if _struct_10i is None:
        _struct_10i = struct.Struct("<10i")
    return _struct_10i
_struct_10f = None
def _get_struct_10f():
    global _struct_10f
    if _struct_10f is None:
        _struct_10f = struct.Struct("<10f")
    return _struct_10f
