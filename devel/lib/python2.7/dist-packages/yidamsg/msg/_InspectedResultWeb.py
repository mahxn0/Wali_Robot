# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from yidamsg/InspectedResultWeb.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class InspectedResultWeb(genpy.Message):
  _md5sum = "7ad3da122c73ba2e57670c36124d35d1"
  _type = "yidamsg/InspectedResultWeb"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 task_history_id
int32 robot_id
int32 point_id
string task_name
float32 value
string name
uint8 alarm_type_id
uint8 alarm_level
string recon_time
string recon_type_name
"""
  __slots__ = ['task_history_id','robot_id','point_id','task_name','value','name','alarm_type_id','alarm_level','recon_time','recon_type_name']
  _slot_types = ['int32','int32','int32','string','float32','string','uint8','uint8','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       task_history_id,robot_id,point_id,task_name,value,name,alarm_type_id,alarm_level,recon_time,recon_type_name

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(InspectedResultWeb, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.task_history_id is None:
        self.task_history_id = 0
      if self.robot_id is None:
        self.robot_id = 0
      if self.point_id is None:
        self.point_id = 0
      if self.task_name is None:
        self.task_name = ''
      if self.value is None:
        self.value = 0.
      if self.name is None:
        self.name = ''
      if self.alarm_type_id is None:
        self.alarm_type_id = 0
      if self.alarm_level is None:
        self.alarm_level = 0
      if self.recon_time is None:
        self.recon_time = ''
      if self.recon_type_name is None:
        self.recon_type_name = ''
    else:
      self.task_history_id = 0
      self.robot_id = 0
      self.point_id = 0
      self.task_name = ''
      self.value = 0.
      self.name = ''
      self.alarm_type_id = 0
      self.alarm_level = 0
      self.recon_time = ''
      self.recon_type_name = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3i().pack(_x.task_history_id, _x.robot_id, _x.point_id))
      _x = self.task_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_f().pack(self.value))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.alarm_type_id, _x.alarm_level))
      _x = self.recon_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.recon_type_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.task_history_id, _x.robot_id, _x.point_id,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_name = str[start:end].decode('utf-8')
      else:
        self.task_name = str[start:end]
      start = end
      end += 4
      (self.value,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.alarm_type_id, _x.alarm_level,) = _get_struct_2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.recon_time = str[start:end].decode('utf-8')
      else:
        self.recon_time = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.recon_type_name = str[start:end].decode('utf-8')
      else:
        self.recon_type_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3i().pack(_x.task_history_id, _x.robot_id, _x.point_id))
      _x = self.task_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_f().pack(self.value))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.alarm_type_id, _x.alarm_level))
      _x = self.recon_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.recon_type_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.task_history_id, _x.robot_id, _x.point_id,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_name = str[start:end].decode('utf-8')
      else:
        self.task_name = str[start:end]
      start = end
      end += 4
      (self.value,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.alarm_type_id, _x.alarm_level,) = _get_struct_2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.recon_time = str[start:end].decode('utf-8')
      else:
        self.recon_time = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.recon_type_name = str[start:end].decode('utf-8')
      else:
        self.recon_type_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
