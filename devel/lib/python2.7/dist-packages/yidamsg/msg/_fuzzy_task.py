# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from yidamsg/fuzzy_task.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class fuzzy_task(genpy.Message):
  _md5sum = "438c1dac4f2a4a69b46ae226145532f4"
  _type = "yidamsg/fuzzy_task"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 control_flag
float32 dis_left
float32 dis_right
float32 included_angle
float32 turn_angle
float32 dis_cur_pos
float32 cur_speed
float32 obstacle_pos
float32 allow_width
float32 next_width
string msg_type
int32 align
"""
  __slots__ = ['control_flag','dis_left','dis_right','included_angle','turn_angle','dis_cur_pos','cur_speed','obstacle_pos','allow_width','next_width','msg_type','align']
  _slot_types = ['int32','float32','float32','float32','float32','float32','float32','float32','float32','float32','string','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       control_flag,dis_left,dis_right,included_angle,turn_angle,dis_cur_pos,cur_speed,obstacle_pos,allow_width,next_width,msg_type,align

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(fuzzy_task, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.control_flag is None:
        self.control_flag = 0
      if self.dis_left is None:
        self.dis_left = 0.
      if self.dis_right is None:
        self.dis_right = 0.
      if self.included_angle is None:
        self.included_angle = 0.
      if self.turn_angle is None:
        self.turn_angle = 0.
      if self.dis_cur_pos is None:
        self.dis_cur_pos = 0.
      if self.cur_speed is None:
        self.cur_speed = 0.
      if self.obstacle_pos is None:
        self.obstacle_pos = 0.
      if self.allow_width is None:
        self.allow_width = 0.
      if self.next_width is None:
        self.next_width = 0.
      if self.msg_type is None:
        self.msg_type = ''
      if self.align is None:
        self.align = 0
    else:
      self.control_flag = 0
      self.dis_left = 0.
      self.dis_right = 0.
      self.included_angle = 0.
      self.turn_angle = 0.
      self.dis_cur_pos = 0.
      self.cur_speed = 0.
      self.obstacle_pos = 0.
      self.allow_width = 0.
      self.next_width = 0.
      self.msg_type = ''
      self.align = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i9f().pack(_x.control_flag, _x.dis_left, _x.dis_right, _x.included_angle, _x.turn_angle, _x.dis_cur_pos, _x.cur_speed, _x.obstacle_pos, _x.allow_width, _x.next_width))
      _x = self.msg_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.align))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.control_flag, _x.dis_left, _x.dis_right, _x.included_angle, _x.turn_angle, _x.dis_cur_pos, _x.cur_speed, _x.obstacle_pos, _x.allow_width, _x.next_width,) = _get_struct_i9f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.msg_type = str[start:end].decode('utf-8')
      else:
        self.msg_type = str[start:end]
      start = end
      end += 4
      (self.align,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i9f().pack(_x.control_flag, _x.dis_left, _x.dis_right, _x.included_angle, _x.turn_angle, _x.dis_cur_pos, _x.cur_speed, _x.obstacle_pos, _x.allow_width, _x.next_width))
      _x = self.msg_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.align))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.control_flag, _x.dis_left, _x.dis_right, _x.included_angle, _x.turn_angle, _x.dis_cur_pos, _x.cur_speed, _x.obstacle_pos, _x.allow_width, _x.next_width,) = _get_struct_i9f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.msg_type = str[start:end].decode('utf-8')
      else:
        self.msg_type = str[start:end]
      start = end
      end += 4
      (self.align,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_i9f = None
def _get_struct_i9f():
    global _struct_i9f
    if _struct_i9f is None:
        _struct_i9f = struct.Struct("<i9f")
    return _struct_i9f
