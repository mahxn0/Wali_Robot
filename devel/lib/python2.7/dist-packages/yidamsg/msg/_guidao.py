# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from yidamsg/guidao.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class guidao(genpy.Message):
  _md5sum = "5f7b72245dfc6166afb75ac5cae3a673"
  _type = "yidamsg/guidao"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string rec_method
string rec_name
int32 dec_hat
int32 dec_glove
int32 dec_shoe
int32 rail
int32 safety_belt
string alam
string action
"""
  __slots__ = ['rec_method','rec_name','dec_hat','dec_glove','dec_shoe','rail','safety_belt','alam','action']
  _slot_types = ['string','string','int32','int32','int32','int32','int32','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       rec_method,rec_name,dec_hat,dec_glove,dec_shoe,rail,safety_belt,alam,action

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(guidao, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.rec_method is None:
        self.rec_method = ''
      if self.rec_name is None:
        self.rec_name = ''
      if self.dec_hat is None:
        self.dec_hat = 0
      if self.dec_glove is None:
        self.dec_glove = 0
      if self.dec_shoe is None:
        self.dec_shoe = 0
      if self.rail is None:
        self.rail = 0
      if self.safety_belt is None:
        self.safety_belt = 0
      if self.alam is None:
        self.alam = ''
      if self.action is None:
        self.action = ''
    else:
      self.rec_method = ''
      self.rec_name = ''
      self.dec_hat = 0
      self.dec_glove = 0
      self.dec_shoe = 0
      self.rail = 0
      self.safety_belt = 0
      self.alam = ''
      self.action = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.rec_method
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.rec_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_5i().pack(_x.dec_hat, _x.dec_glove, _x.dec_shoe, _x.rail, _x.safety_belt))
      _x = self.alam
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rec_method = str[start:end].decode('utf-8')
      else:
        self.rec_method = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rec_name = str[start:end].decode('utf-8')
      else:
        self.rec_name = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.dec_hat, _x.dec_glove, _x.dec_shoe, _x.rail, _x.safety_belt,) = _get_struct_5i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.alam = str[start:end].decode('utf-8')
      else:
        self.alam = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action = str[start:end].decode('utf-8')
      else:
        self.action = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.rec_method
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.rec_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_5i().pack(_x.dec_hat, _x.dec_glove, _x.dec_shoe, _x.rail, _x.safety_belt))
      _x = self.alam
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rec_method = str[start:end].decode('utf-8')
      else:
        self.rec_method = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rec_name = str[start:end].decode('utf-8')
      else:
        self.rec_name = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.dec_hat, _x.dec_glove, _x.dec_shoe, _x.rail, _x.safety_belt,) = _get_struct_5i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.alam = str[start:end].decode('utf-8')
      else:
        self.alam = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action = str[start:end].decode('utf-8')
      else:
        self.action = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5i = None
def _get_struct_5i():
    global _struct_5i
    if _struct_5i is None:
        _struct_5i = struct.Struct("<5i")
    return _struct_5i
