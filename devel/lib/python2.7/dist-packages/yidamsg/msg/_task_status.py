# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from yidamsg/task_status.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class task_status(genpy.Message):
  _md5sum = "819ed6ebecf2f7d3f8dc2a0e3cded22d"
  _type = "yidamsg/task_status"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 taskid
float32 start_x
float32 start_y
float32 start_z
float32 end_x
float32 end_y
float32 end_z
float32 alldis
float32 dis
float32 speed
float32 dis_left
float32 dis_right
float32 next_width
float32 road_width
int32 control_flag
string log
int32 direction
int32 align
"""
  __slots__ = ['taskid','start_x','start_y','start_z','end_x','end_y','end_z','alldis','dis','speed','dis_left','dis_right','next_width','road_width','control_flag','log','direction','align']
  _slot_types = ['int32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','int32','string','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       taskid,start_x,start_y,start_z,end_x,end_y,end_z,alldis,dis,speed,dis_left,dis_right,next_width,road_width,control_flag,log,direction,align

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(task_status, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.taskid is None:
        self.taskid = 0
      if self.start_x is None:
        self.start_x = 0.
      if self.start_y is None:
        self.start_y = 0.
      if self.start_z is None:
        self.start_z = 0.
      if self.end_x is None:
        self.end_x = 0.
      if self.end_y is None:
        self.end_y = 0.
      if self.end_z is None:
        self.end_z = 0.
      if self.alldis is None:
        self.alldis = 0.
      if self.dis is None:
        self.dis = 0.
      if self.speed is None:
        self.speed = 0.
      if self.dis_left is None:
        self.dis_left = 0.
      if self.dis_right is None:
        self.dis_right = 0.
      if self.next_width is None:
        self.next_width = 0.
      if self.road_width is None:
        self.road_width = 0.
      if self.control_flag is None:
        self.control_flag = 0
      if self.log is None:
        self.log = ''
      if self.direction is None:
        self.direction = 0
      if self.align is None:
        self.align = 0
    else:
      self.taskid = 0
      self.start_x = 0.
      self.start_y = 0.
      self.start_z = 0.
      self.end_x = 0.
      self.end_y = 0.
      self.end_z = 0.
      self.alldis = 0.
      self.dis = 0.
      self.speed = 0.
      self.dis_left = 0.
      self.dis_right = 0.
      self.next_width = 0.
      self.road_width = 0.
      self.control_flag = 0
      self.log = ''
      self.direction = 0
      self.align = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i13fi().pack(_x.taskid, _x.start_x, _x.start_y, _x.start_z, _x.end_x, _x.end_y, _x.end_z, _x.alldis, _x.dis, _x.speed, _x.dis_left, _x.dis_right, _x.next_width, _x.road_width, _x.control_flag))
      _x = self.log
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2i().pack(_x.direction, _x.align))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 60
      (_x.taskid, _x.start_x, _x.start_y, _x.start_z, _x.end_x, _x.end_y, _x.end_z, _x.alldis, _x.dis, _x.speed, _x.dis_left, _x.dis_right, _x.next_width, _x.road_width, _x.control_flag,) = _get_struct_i13fi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.log = str[start:end].decode('utf-8')
      else:
        self.log = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.direction, _x.align,) = _get_struct_2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i13fi().pack(_x.taskid, _x.start_x, _x.start_y, _x.start_z, _x.end_x, _x.end_y, _x.end_z, _x.alldis, _x.dis, _x.speed, _x.dis_left, _x.dis_right, _x.next_width, _x.road_width, _x.control_flag))
      _x = self.log
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2i().pack(_x.direction, _x.align))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 60
      (_x.taskid, _x.start_x, _x.start_y, _x.start_z, _x.end_x, _x.end_y, _x.end_z, _x.alldis, _x.dis, _x.speed, _x.dis_left, _x.dis_right, _x.next_width, _x.road_width, _x.control_flag,) = _get_struct_i13fi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.log = str[start:end].decode('utf-8')
      else:
        self.log = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.direction, _x.align,) = _get_struct_2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_i13fi = None
def _get_struct_i13fi():
    global _struct_i13fi
    if _struct_i13fi is None:
        _struct_i13fi = struct.Struct("<i13fi")
    return _struct_i13fi
