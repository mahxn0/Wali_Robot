# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from yidamsg/Point_ProjectionRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Point_ProjectionRequest(genpy.Message):
  _md5sum = "b9fcf3e39769a39568d087fcc46a1bb9"
  _type = "yidamsg/Point_ProjectionRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 x1
float32 y1
float32 z1
float32 x2
float32 y2
float32 z2
float32 x3
float32 y3
float32 z3
float32 x4
float32 y4
float32 z4
int32 flag
"""
  __slots__ = ['x1','y1','z1','x2','y2','z2','x3','y3','z3','x4','y4','z4','flag']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x1,y1,z1,x2,y2,z2,x3,y3,z3,x4,y4,z4,flag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Point_ProjectionRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x1 is None:
        self.x1 = 0.
      if self.y1 is None:
        self.y1 = 0.
      if self.z1 is None:
        self.z1 = 0.
      if self.x2 is None:
        self.x2 = 0.
      if self.y2 is None:
        self.y2 = 0.
      if self.z2 is None:
        self.z2 = 0.
      if self.x3 is None:
        self.x3 = 0.
      if self.y3 is None:
        self.y3 = 0.
      if self.z3 is None:
        self.z3 = 0.
      if self.x4 is None:
        self.x4 = 0.
      if self.y4 is None:
        self.y4 = 0.
      if self.z4 is None:
        self.z4 = 0.
      if self.flag is None:
        self.flag = 0
    else:
      self.x1 = 0.
      self.y1 = 0.
      self.z1 = 0.
      self.x2 = 0.
      self.y2 = 0.
      self.z2 = 0.
      self.x3 = 0.
      self.y3 = 0.
      self.z3 = 0.
      self.x4 = 0.
      self.y4 = 0.
      self.z4 = 0.
      self.flag = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12fi().pack(_x.x1, _x.y1, _x.z1, _x.x2, _x.y2, _x.z2, _x.x3, _x.y3, _x.z3, _x.x4, _x.y4, _x.z4, _x.flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.x1, _x.y1, _x.z1, _x.x2, _x.y2, _x.z2, _x.x3, _x.y3, _x.z3, _x.x4, _x.y4, _x.z4, _x.flag,) = _get_struct_12fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12fi().pack(_x.x1, _x.y1, _x.z1, _x.x2, _x.y2, _x.z2, _x.x3, _x.y3, _x.z3, _x.x4, _x.y4, _x.z4, _x.flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.x1, _x.y1, _x.z1, _x.x2, _x.y2, _x.z2, _x.x3, _x.y3, _x.z3, _x.x4, _x.y4, _x.z4, _x.flag,) = _get_struct_12fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12fi = None
def _get_struct_12fi():
    global _struct_12fi
    if _struct_12fi is None:
        _struct_12fi = struct.Struct("<12fi")
    return _struct_12fi
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from yidamsg/Point_ProjectionResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Point_ProjectionResponse(genpy.Message):
  _md5sum = "3a1255d4d998bd4d6585c64639b5ee9a"
  _type = "yidamsg/Point_ProjectionResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool status

"""
  __slots__ = ['status']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Point_ProjectionResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.status is None:
        self.status = False
    else:
      self.status = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.status,) = _get_struct_B().unpack(str[start:end])
      self.status = bool(self.status)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.status,) = _get_struct_B().unpack(str[start:end])
      self.status = bool(self.status)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class Point_Projection(object):
  _type          = 'yidamsg/Point_Projection'
  _md5sum = 'e1bcbee91e599262133249ba6a7c9a32'
  _request_class  = Point_ProjectionRequest
  _response_class = Point_ProjectionResponse
